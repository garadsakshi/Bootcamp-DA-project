# -*- coding: utf-8 -*-
"""Sakshi Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17pAlFR2fNWJ_A-IUzg4F4kqFYzmJFeD3

# TITANIC SURVIVOR ANALYSIS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
 
# %matplotlib inline

"""# `READING DATA USING LIBRARIES`

We use pandas read_csv function for reading the csv file in python & pandas DataFrame to convert the file into data frame.
"""

Df=pd.DataFrame(pd.read_csv('/content/train (1).csv'))
Df.shape

"""Through this we get the no. of rows and columns in the file

We use this function to view the file data from the top.
"""

Df.head(5)

"""To view the data from bottom use .tail() function"""

Df.tail(8)

"""As the datasheet may have some missing values, we cannot leave them as it is.
Following fxn tells whether they have a null value or not.

"""

Df.isnull()

Df.isnull().sum()

"""Now this is a significant missing values.So to take all that out of the dataset so I have the appropriate dataset to analyse,i will remove the values which has more than 35% missing values."""

x=Df.isnull().sum()
drop_col=x[x>(35/100*Df.shape[0])]
drop_col

drop_col.index

Df.drop(drop_col.index,axis=1,inplace=True)
Df.isnull().sum()

"""All columns could not be droped because they consist of less missing vaue,they contain data which is helpful for analysis while cabin had more than 35% of missing values and therefore wasn't useful for us.

From the above output we saw we still have two areas where we have the null values.We will fill that data with a mean value
"""

Df.fillna(Df.mean(),inplace=True)
Df.isnull().sum()

"""Now the age column has no missing values but embarked column still has missing value because it consist of string and we can't have the mean of the string."""

Df['Embarked'].describe()

Df['Embarked'].fillna('S',inplace=True) 
Df.isnull().sum()

"""Now the embarked col too has no null values"""

Df.corr()

"""The above o/p shows the corelation between the columns
as 
-  higher the passenger class,higher the fare
- diagonal elements have 1 as corelation is between the column itself
"""

Df['FamilySize']=Df['SibSp']+Df['Parch']
Df.drop(['SibSp','Parch'],axis=1,inplace=True)
Df.corr()

"""Here I have merged 2 columns i.e no. of siblings and no. of parents abroad to get a new column i.e Family size
We can conclude that:

-survival rate is higher for higher Pclass
 
 -family size has no relation with the survival rate

Now we are checking the survival rate depending upon whether he/she is alone.
"""

Df['Alone']=[0 if Df['FamilySize'][i]>0 else 1 for i in Df.index]
Df.head(6)

Df.hist(column="Alone",by="Survived",color="g")

Df.groupby(['Alone'])['Survived'].mean()

"""From above we can conclude that if the person was alone he/she had less chance of living as there are chances that the person who was travelling with his family might have been rich and prioritized over other.

We can also find the relation between the fare and who are alone.

The below table shoows that if the person is not alone then the chance of ticket price bieng higher is high.
"""

Df[['Alone','Fare']].corr()

"""following is the relation of survived with embarked"""

Df.groupby(['Embarked'])['Survived'].mean()